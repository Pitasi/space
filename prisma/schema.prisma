// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Article {
    id         String       @id @default(cuid())
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    slug       String
    title      String
    content    String
    published  Boolean      @default(false)
    author     User         @relation(fields: [authorId], references: [id])
    authorId   String
    articleTag ArticleTag[]
    comment    Comment[]
}

model ArticleTag {
    id        String   @id @default(cuid())
    slug      String
    name      String
    article   Article? @relation(fields: [articleId], references: [id])
    articleId String?
}

model App {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    slug        String
    title       String
    description String?
    logoUrl     String?
    author      User     @relation(fields: [authorId], references: [id])
    authorId    String

    tags    AppTag[]
    comment Comment[]
}

model AppTag {
    id    String  @id @default(cuid())
    slug  String
    name  String
    app   App?    @relation(fields: [appId], references: [id])
    appId String?
}

model AmaQuestion {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    question    String
    description String?
    published   Boolean   @default(false)
    author      User      @relation(fields: [authorId], references: [id])
    authorId    String
    comment     Comment[]
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String

    // Comment can be on any of those other models
    article   Article? @relation(fields: [articleId], references: [id])
    articleId String?

    app   App?    @relation(fields: [appId], references: [id])
    appId String?

    amaQuestion   AmaQuestion? @relation(fields: [amaQuestionId], references: [id])
    amaQuestionId String?
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    admin         Boolean
    accounts      Account[]
    sessions      Session[]
    articles      Article[]
    apps          App[]
    amaQuestion   AmaQuestion[]
    comment       Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
